from agency_swarm.tools import BaseTool
from pydantic import Field
import os
from dotenv import load_dotenv
import json
import datetime
import sys

load_dotenv()  # K√∂rnyezeti v√°ltoz√≥k bet√∂lt√©se

class PostPublisher(BaseTool):
    """
    Ez az eszk√∂z a gener√°lt ingatlan posztokat √©s a hozz√°juk tartoz√≥ k√©pek URL-jeit elmenti 
    egy struktur√°lt form√°tumban a Veyron Hungary dashboardon val√≥ megjelen√≠t√©shez.
    A rendszer k√©s≈ëbb k√©pes lehet automatikus publik√°l√°sra a megadott platformokon.
    """
    
    post_content: str = Field(
        ..., description="A gener√°lt poszt tartalma, amit publik√°lni szeretn√©nk"
    )
    
    property_name: str = Field(
        ..., description="Az ingatlan neve vagy azonos√≠t√≥ja, seg√≠t a nyilv√°ntart√°sban"
    )
    
    image_urls: list = Field(
        default=[], description="A poszthoz csatoland√≥ k√©pek URL-jeinek list√°ja az ImgBB-r≈ël"
    )
    
    scheduled_time: str = Field(
        "", description="Opcion√°lis: a k√∂zz√©t√©tel tervezett id≈ëpontja (ISO form√°tumban, pl. '2023-12-31T15:30:00')"
    )
    
    def run(self):
        """
        Elmenti a posztot √©s a k√©peket egy JSON f√°jlba a dashboardon val√≥ megjelen√≠t√©shez.
        """
        try:
            # Mappa l√©trehoz√°sa, ha m√©g nem l√©tezik
            os.makedirs("veyron_agency/social_media_posts", exist_ok=True)
            
            # Aktu√°lis id≈ë megszerz√©se f√°jln√©vhez
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"veyron_agency/social_media_posts/post_{self.property_name.replace(' ', '_')}_{timestamp}.json"
            
            # Hozzuk l√©tre a post objektumot
            post_data = {
                "property_name": self.property_name,
                "content": self.post_content,
                "image_urls": self.image_urls,
                "tone": "professional",  # A hangnem mindig professzion√°lis
                "created_at": datetime.datetime.now().isoformat(),
                "scheduled_time": self.scheduled_time if self.scheduled_time else None,
                "status": "pending" if self.scheduled_time else "ready",
            }
            
            # Ments√ºk el JSON form√°tumban
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(post_data, f, ensure_ascii=False, indent=4)
            
            # L√©trehozzuk a dashboard sz√°m√°ra egy √∂sszes posztot tartalmaz√≥ k√∂z√∂s f√°jlt is
            posts_summary_file = "veyron_agency/social_media_posts/all_posts.json"
            
            all_posts = []
            # Ha a f√°jl m√°r l√©tezik, olvassuk be a tartalm√°t
            if os.path.exists(posts_summary_file):
                try:
                    with open(posts_summary_file, "r", encoding="utf-8") as f:
                        all_posts = json.load(f)
                except Exception:
                    all_posts = []
            
            # Adjuk hozz√° az √∫j posztot
            all_posts.append(post_data)
            
            # √çrjuk vissza a f√°jlt
            with open(posts_summary_file, "w", encoding="utf-8") as f:
                json.dump(all_posts, f, ensure_ascii=False, indent=4)
            
            return {
                "status": "success",
                "message": f"A poszt sikeresen el lett mentve! F√°jl: {filename}",
                "filename": filename,
                "post_data": post_data
            }
                
        except Exception as e:
            return f"Hiba: {str(e)}"

if __name__ == "__main__":
    # Teszt futtat√°sa vagy parancssori argumentumok kezel√©se
    if len(sys.argv) > 1:
        try:
            # Param√©terek beolvas√°sa f√°jlb√≥l
            params_file_path = sys.argv[1]
            with open(params_file_path, 'r', encoding='utf-8') as f:
                params = json.load(f)
            
            # Param√©terek kinyer√©se
            post_content = params.get('post_content', '')
            property_name = params.get('property_name', '')
            image_urls = params.get('image_urls', [])
            scheduled_time = params.get('scheduled_time', '')
            
            # Tool p√©ld√°nyos√≠t√°sa
            publisher = PostPublisher(
                post_content=post_content,
                property_name=property_name,
                image_urls=image_urls,
                scheduled_time=scheduled_time
            )
            result = publisher.run()
            print(json.dumps(result) if isinstance(result, dict) else result)
        except Exception as e:
            print(json.dumps({
                "status": "error",
                "message": str(e)
            }))
    else:
        # Teszt futtat√°sa
        publisher = PostPublisher(
            post_content="Exkluz√≠v villa a II. ker√ºletben! üè° Gy√∂ny√∂r≈± kil√°t√°s a v√°rosra. #luxusingatlan #Budapest",
            property_name="R√≥zsadomb Villa",
            image_urls=["https://i.ibb.co/example1.jpg", "https://i.ibb.co/example2.jpg"],
            scheduled_time="2023-12-31T15:30:00"
        )
        print(publisher.run()) 